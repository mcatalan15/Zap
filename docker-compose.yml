version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Direct access for dev/testing
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]  # Changed /health to /api/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    build:
      context: ./infrastructure/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      backend:
        condition: service_healthy  # Wait for backend to be healthy
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"  # Optional: expose for local debugging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:8.5  # Latest stable version as of 2025
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@zap.local  # Login email
      - PGADMIN_DEFAULT_PASSWORD=admin  # Login password (change in production)
      - PGADMIN_CONFIG_SERVER_MODE=False  # Single-user mode for simplicity
    ports:
      - "5050:80"  # Access at http://localhost:5050
    volumes:
      - pgadmin-data:/var/lib/pgadmin  # Persist pgAdmin config
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data:
